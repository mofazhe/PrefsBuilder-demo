def pkgType
// if (project.hasProperty("android")) {
if (project.getPlugins().hasPlugin('com.android.application') ||
        project.getPlugins().hasPlugin('com.android.library')) {
    // Android libraries
    pkgType = "aar"
    task sourcesJar(type: Jar) {
        // classifier = 'sources'
        getArchiveClassifier().set("sources")
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        // https://github.com/novoda/bintray-release/issues/71
        excludes = ['**/*.kt'] // < ---- Exclude all kotlin files from javadoc file.
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else {
    // Java libraries
    pkgType = "jar"
    task sourcesJar(type: Jar, dependsOn: classes) {
        // classifier = 'sources'
        getArchiveClassifier().set("sources")
        from sourceSets.main.allSource
    }
}

// 强制 Java/JavaDoc 等的编码为 UTF-8
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
    options.charSet = "UTF-8"
    options.author = true
    options.version = true
    options.tags += ['date', 'time']
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    // classifier = 'javadoc'
    getArchiveClassifier().set("javadoc")
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        archives androidSourcesJar
        archives androidJavadocsJar
    } else {
        archives sourcesJar
        archives javadocJar
    }
}

apply plugin: 'maven'
apply plugin: 'signing'


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

def developerId = properties.getProperty("developerId")
def developerName = properties.getProperty("developerName")
def developerEmail = properties.getProperty("developerEmail")
def publishGroupId = publishGroupId

ext["signing.keyId"] = properties.getProperty("signing.keyId")
ext["signing.password"] = properties.getProperty("signing.password")
ext["signing.secretKeyRingFile"] = properties.getProperty("signing.secretKeyRingFile")
ext["ossrhUsername"] = properties.getProperty("ossrhUsername")
ext["ossrhPassword"] = properties.getProperty("ossrhPassword")

//签名
signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

// uploadArchives {
//     repositories {
//         mavenDeployer {
//             repository(url: uri('../repo'))
//
//             pom.groupId = "io.github.mofazhe"
//             pom.artifactId = artifact
//         }
//     }
// }

uploadArchives {
    repositories {
        mavenDeployer {

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            //这里可以不是直接申请时候的groupId只要开头是就可以
            pom.groupId = publishGroupId
            // pom.artifactId = artifact
            // pom.version = libraryVersion
            //这个是直接获取的库gradle里配置好的版本号，不用到处修改版本号，只需要维护一份就可以。
            // pom.version = android.defaultConfig.versionName

            pom.project {
                packaging pkgType

                def gitUrl = "https://github.com/mofazhe/prefs-builder-android"
                def gitScheme = "scm:git@github.com:mofazhe/prefs-builder-android.git"

                name libraryName // '发布库的简单名称'
                // optionally artifactId can be defined here
                description libraryDescription // '发布包的描述'
                url gitUrl // '可以写公司官网地址或github个人页面地址'

                scm {
                    connection gitScheme // 'scm:替换成项目git地址'
                    developerConnection gitScheme // 'scm:替换为git开头的项目地址'
                    url gitUrl // '项目首页，可以是github项目的主页'
                }

                licenses {
                    license {
                        name "The Apache Software License, Version 2.0"
                        url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
            }
        }
    }
}